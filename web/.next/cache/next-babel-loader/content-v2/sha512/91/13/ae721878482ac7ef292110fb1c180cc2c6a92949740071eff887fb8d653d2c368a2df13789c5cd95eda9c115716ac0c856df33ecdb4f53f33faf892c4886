{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/keki/dev/websites/lireddit/web/src/pages/register.tsx\";\nimport { Box, Button, useToast } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { useRegisterMutation } from \"../generated/graphql\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { useRouter } from \"next/router\";\n\nconst Register = ({}) => {\n  const router = useRouter();\n  const toast = useToast();\n  const [, register] = useRegisterMutation();\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    variant: \"small\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: {\n        username: \"\",\n        password: \"\"\n      },\n      onSubmit: async (values, {\n        setErrors\n      }) => {\n        var _response$data, _response$data2;\n\n        const response = await register(values);\n\n        if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.register.errors) {\n          setErrors(toErrorMap(response.data.register.errors));\n        } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.register.user) {\n          toast({\n            title: \"성공적으로 처리하였습니다\",\n            description: \"계정 생성 완료\",\n            status: \"success\",\n            duration: 1000,\n            isClosable: true\n          });\n          router.push(\"/\");\n        }\n      },\n      children: ({\n        isSubmitting\n      }) => /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(InputField, {\n          name: \"\\u3137\",\n          placeholder: \"username\",\n          label: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          mt: 4,\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            name: \"password\",\n            placeholder: \"password\",\n            label: \"Password\",\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          mt: 4,\n          isLoading: isSubmitting,\n          type: \"submit\",\n          backgroundColor: \"teal\",\n          color: \"white\",\n          children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Register;","map":{"version":3,"sources":["/Users/keki/dev/websites/lireddit/web/src/pages/register.tsx"],"names":["Box","Button","useToast","Form","Formik","React","InputField","Wrapper","useRegisterMutation","toErrorMap","useRouter","Register","router","toast","register","username","password","values","setErrors","response","data","errors","user","title","description","status","duration","isClosable","push","isSubmitting"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,QAAtB,QAAsC,kBAAtC;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,QAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAIA,MAAMC,QAAiC,GAAG,CAAC,EAAD,KAAQ;AAChD,QAAMC,MAAM,GAAGF,SAAS,EAAxB;AACA,QAAMG,KAAK,GAAGX,QAAQ,EAAtB;AACA,QAAM,GAAGY,QAAH,IAAeN,mBAAmB,EAAxC;AACA,sBACE,QAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE;AAAEO,QAAAA,QAAQ,EAAE,EAAZ;AAAgBC,QAAAA,QAAQ,EAAE;AAA1B,OADjB;AAEE,MAAA,QAAQ,EAAE,OAAOC,MAAP,EAAe;AAAEC,QAAAA;AAAF,OAAf,KAAiC;AAAA;;AACzC,cAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACG,MAAD,CAA/B;;AACA,8BAAIE,QAAQ,CAACC,IAAb,2CAAI,eAAeN,QAAf,CAAwBO,MAA5B,EAAoC;AAClCH,UAAAA,SAAS,CAACT,UAAU,CAACU,QAAQ,CAACC,IAAT,CAAcN,QAAd,CAAuBO,MAAxB,CAAX,CAAT;AACD,SAFD,MAEO,uBAAIF,QAAQ,CAACC,IAAb,4CAAI,gBAAeN,QAAf,CAAwBQ,IAA5B,EAAkC;AACvCT,UAAAA,KAAK,CAAC;AACJU,YAAAA,KAAK,EAAE,eADH;AAEJC,YAAAA,WAAW,EAAE,UAFT;AAGJC,YAAAA,MAAM,EAAE,SAHJ;AAIJC,YAAAA,QAAQ,EAAE,IAJN;AAKJC,YAAAA,UAAU,EAAE;AALR,WAAD,CAAL;AAQAf,UAAAA,MAAM,CAACgB,IAAP,CAAY,GAAZ;AACD;AACF,OAjBH;AAAA,gBAmBG,CAAC;AAAEC,QAAAA;AAAF,OAAD,kBACC,QAAC,IAAD;AAAA,gCACE,QAAC,UAAD;AAAY,UAAA,IAAI,EAAC,QAAjB;AAAqB,UAAA,WAAW,EAAC,UAAjC;AAA4C,UAAA,KAAK,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,GAAD;AAAK,UAAA,EAAE,EAAE,CAAT;AAAA,iCACE,QAAC,UAAD;AACE,YAAA,IAAI,EAAC,UADP;AAEE,YAAA,WAAW,EAAC,UAFd;AAGE,YAAA,KAAK,EAAC,UAHR;AAIE,YAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF,eAUE,QAAC,MAAD;AACE,UAAA,EAAE,EAAE,CADN;AAEE,UAAA,SAAS,EAAEA,YAFb;AAGE,UAAA,IAAI,EAAC,QAHP;AAIE,UAAA,eAAe,EAAC,MAJlB;AAKE,UAAA,KAAK,EAAC,OALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AApBJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA8CD,CAlDD;;AAoDA,eAAelB,QAAf","sourcesContent":["import { Box, Button, useToast } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { useRegisterMutation } from \"../generated/graphql\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { useRouter } from \"next/router\";\n\ninterface registerProps {}\n\nconst Register: React.FC<registerProps> = ({}) => {\n  const router = useRouter();\n  const toast = useToast();\n  const [, register] = useRegisterMutation();\n  return (\n    <Wrapper variant=\"small\">\n      <Formik\n        initialValues={{ username: \"\", password: \"\" }}\n        onSubmit={async (values, { setErrors }) => {\n          const response = await register(values);\n          if (response.data?.register.errors) {\n            setErrors(toErrorMap(response.data.register.errors));\n          } else if (response.data?.register.user) {\n            toast({\n              title: \"성공적으로 처리하였습니다\",\n              description: \"계정 생성 완료\",\n              status: \"success\",\n              duration: 1000,\n              isClosable: true,\n            });\n\n            router.push(\"/\");\n          }\n        }}\n      >\n        {({ isSubmitting }) => (\n          <Form>\n            <InputField name=\"ㄷ\" placeholder=\"username\" label=\"Username\" />\n            <Box mt={4}>\n              <InputField\n                name=\"password\"\n                placeholder=\"password\"\n                label=\"Password\"\n                type=\"password\"\n              />\n            </Box>\n            <Button\n              mt={4}\n              isLoading={isSubmitting}\n              type=\"submit\"\n              backgroundColor=\"teal\"\n              color=\"white\"\n            >\n              회원가입\n            </Button>\n          </Form>\n        )}\n      </Formik>\n    </Wrapper>\n  );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}
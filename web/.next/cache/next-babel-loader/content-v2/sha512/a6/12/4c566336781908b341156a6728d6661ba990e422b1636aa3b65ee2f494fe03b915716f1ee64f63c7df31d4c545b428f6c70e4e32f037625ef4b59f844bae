{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/keki/dev/websites/lireddit/web/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/keki/dev/websites/lireddit/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/keki/dev/websites/lireddit/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"/Users/keki/dev/websites/lireddit/web/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _jsxFileName = \"/Users/keki/dev/websites/lireddit/web/src/pages/register.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Box, Button, useToast } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { useRegisterMutation } from \"../generated/graphql\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { useRouter } from \"next/router\";\nimport { Navbar } from \"../components/Navbar\";\nimport { useMeQuery } from \"../generated/graphql\";\n\nvar Register = function Register(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n  var toast = useToast();\n\n  var _useRegisterMutation = useRegisterMutation(),\n      _useRegisterMutation2 = _slicedToArray(_useRegisterMutation, 2),\n      register = _useRegisterMutation2[1];\n\n  var _useMeQuery = useMeQuery(),\n      _useMeQuery2 = _slicedToArray(_useMeQuery, 1),\n      data = _useMeQuery2[0].data;\n\n  if (data !== null && data !== void 0 && data.me) {\n    alert(\"계정은 1개로 제한됩니다\");\n    router.push(\"/\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Wrapper, {\n      variant: \"small\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          username: \"\",\n          password: \"\"\n        },\n        onSubmit: /*#__PURE__*/function () {\n          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, _ref2) {\n            var _response$data, _response$data2;\n\n            var setErrors, response;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    setErrors = _ref2.setErrors;\n                    _context.next = 3;\n                    return register(values);\n\n                  case 3:\n                    response = _context.sent;\n\n                    if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.register.errors) {\n                      setErrors(toErrorMap(response.data.register.errors));\n                    } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.register.user) {\n                      toast({\n                        title: \"성공적으로 처리하였습니다\",\n                        description: \"계정 생성 완료\",\n                        status: \"success\",\n                        duration: 1000,\n                        isClosable: true\n                      });\n                      router.push(\"/\");\n                      router.reload();\n                    }\n\n                  case 5:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          return function (_x, _x2) {\n            return _ref3.apply(this, arguments);\n          };\n        }(),\n        children: function children(_ref4) {\n          var isSubmitting = _ref4.isSubmitting;\n          return /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(InputField, {\n              name: \"username\",\n              placeholder: \"\\uB2C9\\uB124\\uC784\",\n              label: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Box, {\n              mt: 4,\n              children: /*#__PURE__*/_jsxDEV(InputField, {\n                name: \"password\",\n                placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n                label: \"Password\",\n                type: \"password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 17\n              }, _this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(Button, {\n              mt: 4,\n              isLoading: isSubmitting,\n              type: \"submit\",\n              backgroundColor: \"teal\",\n              color: \"white\",\n              children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, _this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true);\n};\n\n_s(Register, \"UNgiDPCiqec4lVw2xZyx/pL7uVQ=\", false, function () {\n  return [useRouter, useToast, useRegisterMutation, useMeQuery];\n});\n\n_c = Register;\nexport default Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/keki/dev/websites/lireddit/web/src/pages/register.tsx"],"names":["Box","Button","useToast","Form","Formik","React","InputField","Wrapper","useRegisterMutation","toErrorMap","useRouter","Navbar","useMeQuery","Register","router","toast","register","data","me","alert","push","username","password","values","setErrors","response","errors","user","title","description","status","duration","isClosable","reload","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button, useToast } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { useRegisterMutation } from \"../generated/graphql\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { useRouter } from \"next/router\";\nimport { Navbar } from \"../components/Navbar\";\nimport { useMeQuery } from \"../generated/graphql\";\n\ninterface registerProps {}\n\nconst Register: React.FC<registerProps> = ({}) => {\n  const router = useRouter();\n  const toast = useToast();\n  const [, register] = useRegisterMutation();\n  const [{ data }] = useMeQuery();\n\n  if (data?.me) {\n    alert(\"계정은 1개로 제한됩니다\");\n    router.push(\"/\");\n  }\n  return (\n    <>\n      <Navbar />\n      <Wrapper variant=\"small\">\n        <Formik\n          initialValues={{ username: \"\", password: \"\" }}\n          onSubmit={async (values, { setErrors }) => {\n            const response = await register(values);\n            if (response.data?.register.errors) {\n              setErrors(toErrorMap(response.data.register.errors));\n            } else if (response.data?.register.user) {\n              toast({\n                title: \"성공적으로 처리하였습니다\",\n                description: \"계정 생성 완료\",\n                status: \"success\",\n                duration: 1000,\n                isClosable: true,\n              });\n\n              router.push(\"/\");\n              router.reload();\n            }\n          }}\n        >\n          {({ isSubmitting }) => (\n            <Form>\n              <InputField\n                name=\"username\"\n                placeholder=\"닉네임\"\n                label=\"Username\"\n              />\n              <Box mt={4}>\n                <InputField\n                  name=\"password\"\n                  placeholder=\"비밀번호\"\n                  label=\"Password\"\n                  type=\"password\"\n                />\n              </Box>\n              <Button\n                mt={4}\n                isLoading={isSubmitting}\n                type=\"submit\"\n                backgroundColor=\"teal\"\n                color=\"white\"\n              >\n                회원가입\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}
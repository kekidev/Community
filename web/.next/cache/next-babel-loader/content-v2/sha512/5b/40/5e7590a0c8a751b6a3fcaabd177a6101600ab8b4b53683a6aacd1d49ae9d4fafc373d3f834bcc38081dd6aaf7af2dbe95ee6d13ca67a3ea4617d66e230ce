{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/keki/dev/websites/lireddit/web/src/pages/login.tsx\";\nimport { Box, Button, useToast } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { useLoginMutation } from \"../generated/graphql\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { useRouter } from \"next/router\";\nimport { Navbar } from \"../components/Navbar\";\nimport { useMeQuery } from \"../generated/graphql\";\n\nconst Login = ({}) => {\n  const router = useRouter();\n  const [{\n    data\n  }] = useMeQuery();\n\n  if (data !== null && data !== void 0 && data.me) {\n    alert(\"이미 로그인 되어 있습니다\");\n    router.push(\"/\");\n  }\n\n  const toast = useToast();\n  const [, login] = useLoginMutation();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n      variant: \"small\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          username: \"\",\n          password: \"\"\n        },\n        onSubmit: async (values, {\n          setErrors\n        }) => {\n          var _response$data, _response$data2;\n\n          const response = await login({\n            options: values\n          });\n\n          if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.login.errors) {\n            setErrors(toErrorMap(response.data.login.errors));\n          } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.login.user) {\n            toast({\n              title: \"성공적으로 처리하였습니다\",\n              description: \"로그인 완료\",\n              status: \"success\",\n              duration: 1000,\n              isClosable: true\n            });\n            router.push(\"/\");\n            router.reload();\n          }\n        },\n        children: ({\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(InputField, {\n            name: \"username\",\n            placeholder: \"\\uB2C9\\uB124\\uC784\",\n            label: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 4,\n            children: /*#__PURE__*/_jsxDEV(InputField, {\n              name: \"password\",\n              placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n              label: \"Password\",\n              type: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            mt: 4,\n            isLoading: isSubmitting,\n            type: \"submit\",\n            backgroundColor: \"teal\",\n            color: \"white\",\n            children: \"\\uB85C\\uADF8\\uC778\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Login;","map":{"version":3,"sources":["/Users/keki/dev/websites/lireddit/web/src/pages/login.tsx"],"names":["Box","Button","useToast","Form","Formik","React","InputField","Wrapper","useLoginMutation","toErrorMap","useRouter","Navbar","useMeQuery","Login","router","data","me","alert","push","toast","login","username","password","values","setErrors","response","options","errors","user","title","description","status","duration","isClosable","reload","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button, useToast } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { useLoginMutation } from \"../generated/graphql\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { useRouter } from \"next/router\";\nimport { Navbar } from \"../components/Navbar\";\nimport { useMeQuery } from \"../generated/graphql\";\n\ninterface loginProps {}\n\nconst Login: React.FC<loginProps> = ({}) => {\n  const router = useRouter();\n\n  const [{ data }] = useMeQuery();\n\n  if (data?.me) {\n    alert(\"이미 로그인 되어 있습니다\");\n    router.push(\"/\");\n  }\n\n  const toast = useToast();\n  const [, login] = useLoginMutation();\n  return (\n    <>\n      <Navbar />\n      <Wrapper variant=\"small\">\n        <Formik\n          initialValues={{ username: \"\", password: \"\" }}\n          onSubmit={async (values, { setErrors }) => {\n            const response = await login({ options: values });\n            if (response.data?.login.errors) {\n              setErrors(toErrorMap(response.data.login.errors));\n            } else if (response.data?.login.user) {\n              toast({\n                title: \"성공적으로 처리하였습니다\",\n                description: \"로그인 완료\",\n                status: \"success\",\n                duration: 1000,\n                isClosable: true,\n              });\n\n              router.push(\"/\");\n              router.reload();\n            }\n          }}\n        >\n          {({ isSubmitting }) => (\n            <Form>\n              <InputField\n                name=\"username\"\n                placeholder=\"닉네임\"\n                label=\"Username\"\n              />\n              <Box mt={4}>\n                <InputField\n                  name=\"password\"\n                  placeholder=\"비밀번호\"\n                  label=\"Password\"\n                  type=\"password\"\n                />\n              </Box>\n              <Button\n                mt={4}\n                isLoading={isSubmitting}\n                type=\"submit\"\n                backgroundColor=\"teal\"\n                color=\"white\"\n              >\n                로그인\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}
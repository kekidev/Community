{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/keki/dev/websites/lireddit/web/src/pages/register.tsx\";\nimport { Box, Button, useToast } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { useRegisterMutation } from \"../generated/graphql\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { useRouter } from \"next/router\";\nimport { Navbar } from \"../components/Navbar\";\nimport { useMeQuery } from \"../generated/graphql\";\n\nconst Register = ({}) => {\n  const router = useRouter();\n  const toast = useToast();\n  const [, register] = useRegisterMutation();\n  const [{\n    data\n  }] = useMeQuery();\n\n  if (data !== null && data !== void 0 && data.me) {\n    alert(\"계정은 1개로 제한됩니다\");\n    router.push(\"/\");\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n      variant: \"small\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          username: \"\",\n          password: \"\"\n        },\n        onSubmit: async (values, {\n          setErrors\n        }) => {\n          var _response$data, _response$data2;\n\n          const response = await register(values);\n\n          if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.register.errors) {\n            setErrors(toErrorMap(response.data.register.errors));\n          } else if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.register.user) {\n            toast({\n              title: \"성공적으로 처리하였습니다\",\n              description: \"계정 생성 완료\",\n              status: \"success\",\n              duration: 1000,\n              isClosable: true\n            });\n            router.push(\"/\");\n          }\n        },\n        children: ({\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(InputField, {\n            name: \"username\",\n            placeholder: \"\\uB2C9\\uB124\\uC784\",\n            label: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            mt: 4,\n            children: /*#__PURE__*/_jsxDEV(InputField, {\n              name: \"password\",\n              placeholder: \"\\uBE44\\uBC00\\uBC88\\uD638\",\n              label: \"Password\",\n              type: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            mt: 4,\n            isLoading: isSubmitting,\n            type: \"submit\",\n            backgroundColor: \"teal\",\n            color: \"white\",\n            children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\nexport default Register;","map":{"version":3,"sources":["/Users/keki/dev/websites/lireddit/web/src/pages/register.tsx"],"names":["Box","Button","useToast","Form","Formik","React","InputField","Wrapper","useRegisterMutation","toErrorMap","useRouter","Navbar","useMeQuery","Register","router","toast","register","data","me","alert","push","username","password","values","setErrors","response","errors","user","title","description","status","duration","isClosable","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button, useToast } from \"@chakra-ui/react\";\nimport { Form, Formik } from \"formik\";\nimport React from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { useRegisterMutation } from \"../generated/graphql\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { useRouter } from \"next/router\";\nimport { Navbar } from \"../components/Navbar\";\nimport { useMeQuery } from \"../generated/graphql\";\n\ninterface registerProps {}\n\nconst Register: React.FC<registerProps> = ({}) => {\n  const router = useRouter();\n  const toast = useToast();\n  const [, register] = useRegisterMutation();\n  const [{ data }] = useMeQuery();\n\n  if (data?.me) {\n    alert(\"계정은 1개로 제한됩니다\");\n    router.push(\"/\");\n  }\n  return (\n    <>\n      <Navbar />\n      <Wrapper variant=\"small\">\n        <Formik\n          initialValues={{ username: \"\", password: \"\" }}\n          onSubmit={async (values, { setErrors }) => {\n            const response = await register(values);\n            if (response.data?.register.errors) {\n              setErrors(toErrorMap(response.data.register.errors));\n            } else if (response.data?.register.user) {\n              toast({\n                title: \"성공적으로 처리하였습니다\",\n                description: \"계정 생성 완료\",\n                status: \"success\",\n                duration: 1000,\n                isClosable: true,\n              });\n\n              router.push(\"/\");\n            }\n          }}\n        >\n          {({ isSubmitting }) => (\n            <Form>\n              <InputField\n                name=\"username\"\n                placeholder=\"닉네임\"\n                label=\"Username\"\n              />\n              <Box mt={4}>\n                <InputField\n                  name=\"password\"\n                  placeholder=\"비밀번호\"\n                  label=\"Password\"\n                  type=\"password\"\n                />\n              </Box>\n              <Button\n                mt={4}\n                isLoading={isSubmitting}\n                type=\"submit\"\n                backgroundColor=\"teal\"\n                color=\"white\"\n              >\n                회원가입\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Wrapper>\n    </>\n  );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}